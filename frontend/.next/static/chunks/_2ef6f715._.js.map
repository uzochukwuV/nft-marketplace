{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/hooks/useWeb3Provider.tsx"],"sourcesContent":["\"use client\"\r\nimport { BrowserProvider, ethers, JsonRpcSigner, Network } from \"ethers\"\r\nimport { useCallback, useEffect, useState } from \"react\";\r\n\r\n\r\nexport interface IWeb3State {\r\n    address: string | null;\r\n    currentChain: number | null;\r\n    signer: JsonRpcSigner | null;\r\n    provider: BrowserProvider | null;\r\n    isAuthenticated: boolean;\r\n}\r\n\r\nconst sepolia = new Network(\"sepolia\", 11155111)\r\n\r\nconst useWeb3Provider = () => {\r\n    const initialWeb3State = {\r\n        address: null,\r\n        currentChain: null,\r\n        signer: null,\r\n        provider: null,\r\n        isAuthenticated: false,\r\n    };\r\n\r\n    const [state, setState] = useState<IWeb3State>(initialWeb3State);\r\n\r\n    const connect = useCallback(async () => {\r\n        if (state.isAuthenticated) return;\r\n\r\n\r\n        try {\r\n            const { ethereum } = window as any;\r\n\r\n            if (!ethereum) {\r\n                console.log(\"no ethereum provider\")\r\n            }\r\n\r\n            const provider = new ethers.BrowserProvider(ethereum, sepolia);\r\n\r\n            const accounts: string[] = await provider.send(\"eth_requestAccounts\", []);\r\n\r\n            if (accounts.length > 0) {\r\n                const signer = await provider.getSigner();\r\n                const chain = Number((await provider.getNetwork()).chainId);\r\n\r\n                setState({\r\n                    ...state,\r\n                    address: accounts[0],\r\n                    signer,\r\n                    currentChain: chain,\r\n                    provider,\r\n                    isAuthenticated: true,\r\n                });\r\n\r\n                localStorage.setItem(\"isAuthenticated\", \"true\");\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }, [state])\r\n\r\n\r\n    const disconnect = () => {\r\n        setState(initialWeb3State);\r\n        localStorage.removeItem(\"isAuthenticated\");\r\n    };\r\n\r\n\r\n    // automatically connects wallet if already connected before\r\n    useEffect(() => {\r\n        if (typeof window === \"undefined\") return; // Ensure it's running in the browser\r\n    \r\n        const isAuthenticated = localStorage.getItem(\"isAuthenticated\");\r\n    \r\n        if (isAuthenticated === \"true\" && !state.isAuthenticated) {\r\n            connect();\r\n        }\r\n    }, [connect, state.isAuthenticated]);\r\n\r\n    useEffect(() => {\r\n        if (typeof window === \"undefined\") return;\r\n    \r\n        const handleAccountsChanged = (accounts: string[]) => {\r\n            if (accounts.length > 0) {\r\n                setState(prev => ({ ...prev, address: accounts[0] }));\r\n            } else {\r\n                // Optionally reset state if wallet disconnects\r\n                setState(prev => ({ ...prev, address: \"\", isAuthenticated: false }));\r\n                localStorage.removeItem(\"isAuthenticated\");\r\n            }\r\n        };\r\n    \r\n        const handleChainChanged = (chainId: string) => {\r\n            setState(prev => ({ ...prev, currentChain: Number(chainId) }));\r\n        };\r\n    \r\n        // window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\r\n        // window.ethereum.on(\"chainChanged\", handleChainChanged); // 🔁 Use 'chainChanged', not 'networkChanged'\r\n    \r\n        return () => {\r\n            // window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\r\n            // window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\r\n        };\r\n    }, []);\r\n    \r\n\r\n\r\n    return {\r\n        state,\r\n        connect,\r\n        disconnect\r\n    }\r\n\r\n}\r\n\r\nexport default useWeb3Provider;"],"names":[],"mappings":";;;AACA;AAAA;AACA;;AAFA;;;AAaA,MAAM,UAAU,IAAI,mNAAA,CAAA,UAAO,CAAC,WAAW;AAEvC,MAAM,kBAAkB;;IACpB,MAAM,mBAAmB;QACrB,SAAS;QACT,cAAc;QACd,QAAQ;QACR,UAAU;QACV,iBAAiB;IACrB;IAEA,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAc;IAE/C,MAAM,UAAU,CAAA,GAAA,4RAAA,CAAA,cAAW,AAAD;gDAAE;YACxB,IAAI,MAAM,eAAe,EAAE;YAG3B,IAAI;gBACA,MAAM,EAAE,QAAQ,EAAE,GAAG;gBAErB,IAAI,CAAC,UAAU;oBACX,QAAQ,GAAG,CAAC;gBAChB;gBAEA,MAAM,WAAW,IAAI,uOAAA,CAAA,SAAM,CAAC,eAAe,CAAC,UAAU;gBAEtD,MAAM,WAAqB,MAAM,SAAS,IAAI,CAAC,uBAAuB,EAAE;gBAExE,IAAI,SAAS,MAAM,GAAG,GAAG;oBACrB,MAAM,SAAS,MAAM,SAAS,SAAS;oBACvC,MAAM,QAAQ,OAAO,CAAC,MAAM,SAAS,UAAU,EAAE,EAAE,OAAO;oBAE1D,SAAS;wBACL,GAAG,KAAK;wBACR,SAAS,QAAQ,CAAC,EAAE;wBACpB;wBACA,cAAc;wBACd;wBACA,iBAAiB;oBACrB;oBAEA,aAAa,OAAO,CAAC,mBAAmB;gBAC5C;YACJ,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC;YAClB;QACJ;+CAAG;QAAC;KAAM;IAGV,MAAM,aAAa;QACf,SAAS;QACT,aAAa,UAAU,CAAC;IAC5B;IAGA,4DAA4D;IAC5D,CAAA,GAAA,4RAAA,CAAA,YAAS,AAAD;qCAAE;YACN,uCAAmC;;YAAM,EAAE,qCAAqC;YAEhF,MAAM,kBAAkB,aAAa,OAAO,CAAC;YAE7C,IAAI,oBAAoB,UAAU,CAAC,MAAM,eAAe,EAAE;gBACtD;YACJ;QACJ;oCAAG;QAAC;QAAS,MAAM,eAAe;KAAC;IAEnC,CAAA,GAAA,4RAAA,CAAA,YAAS,AAAD;qCAAE;YACN,uCAAmC;;YAAM;YAEzC,MAAM;mEAAwB,CAAC;oBAC3B,IAAI,SAAS,MAAM,GAAG,GAAG;wBACrB;+EAAS,CAAA,OAAQ,CAAC;oCAAE,GAAG,IAAI;oCAAE,SAAS,QAAQ,CAAC,EAAE;gCAAC,CAAC;;oBACvD,OAAO;wBACH,+CAA+C;wBAC/C;+EAAS,CAAA,OAAQ,CAAC;oCAAE,GAAG,IAAI;oCAAE,SAAS;oCAAI,iBAAiB;gCAAM,CAAC;;wBAClE,aAAa,UAAU,CAAC;oBAC5B;gBACJ;;YAEA,MAAM;gEAAqB,CAAC;oBACxB;wEAAS,CAAA,OAAQ,CAAC;gCAAE,GAAG,IAAI;gCAAE,cAAc,OAAO;4BAAS,CAAC;;gBAChE;;YAEA,gEAAgE;YAChE,yGAAyG;YAEzG;6CAAO;gBACH,4EAA4E;gBAC5E,sEAAsE;gBAC1E;;QACJ;oCAAG,EAAE;IAIL,OAAO;QACH;QACA;QACA;IACJ;AAEJ;GAlGM;uCAoGS","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/context/web3Context.tsx"],"sourcesContent":["\"use client\"\r\nimport { createContext, FC, ReactNode, useContext } from \"react\";\r\nimport useWeb3Provider, { IWeb3State } from \"../hooks/useWeb3Provider\";\r\n\r\n\r\nexport interface IWeb3Context {\r\n    connect: () => Promise<void>;\r\n    disconnect: () => void;\r\n    state: IWeb3State;\r\n  }\r\n\r\nconst Web3Context = createContext<IWeb3Context | null>(null);\r\n\r\nconst Web3ContextProvider = ({children}:React.PropsWithChildren)=>{\r\n    const { connect, disconnect, state } = useWeb3Provider();\r\n\r\n\r\n    return (\r\n        <Web3Context.Provider\r\n          value={{\r\n            connect,\r\n            disconnect,\r\n            state,\r\n          }}\r\n        >\r\n          {children}\r\n        </Web3Context.Provider>\r\n      );\r\n}\r\n\r\nexport default Web3ContextProvider;\r\n\r\nexport const useWeb3Context = () => useContext(Web3Context);"],"names":[],"mappings":";;;;;AACA;AACA;;;AAFA;;;AAWA,MAAM,4BAAc,CAAA,GAAA,4RAAA,CAAA,gBAAa,AAAD,EAAuB;AAEvD,MAAM,sBAAsB,CAAC,EAAC,QAAQ,EAAyB;;IAC3D,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,UAAe,AAAD;IAGrD,qBACI,4TAAC,YAAY,QAAQ;QACnB,OAAO;YACL;YACA;YACA;QACF;kBAEC;;;;;;AAGX;GAfM;;QACqC,4HAAA,CAAA,UAAe;;;KADpD;uCAiBS;AAER,MAAM,iBAAiB;;IAAM,OAAA,CAAA,GAAA,4RAAA,CAAA,aAAU,AAAD,EAAE;AAAW;IAA7C","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/hooks/useReadContract.tsx"],"sourcesContent":["import { AbiCoder, Contract } from \"ethers\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport BaseMarketABI from \"@/abi/BaseMarket.json\"\r\n\r\nimport BaseNftABI from \"@/abi/BaseNft.json\"\r\nimport BaseCoinABI from \"@/abi/BaseCoin.json\"\r\nimport { IWeb3Context, useWeb3Context } from \"@/context/web3Context\";\r\n\r\n\r\nexport const coin = \"0xac0b398fb41a7a3ac789ec3f743d2f95574df4d3\" //\"0xc8dc2a0c2ee0cdc3bea8961176bd88638e7634f6\" \r\nexport const nft = \"0xec7903f848e623eaa94c090747a7e6bcd3a77008\"// \"0x30f6d11a066ec1343091b2dc108e6c3cd7faec10\" \r\nexport const market = \"0xe48fad009f8fcef5995bf25946577531c33f0f04\" //\"0xd22caba8dfe5eb0ee64ec5f9b059a91874f4be84\"\r\n\r\ninterface ContractNames {\r\n    contracts: \"BaseMarket\" | \"BaseCoin\" | \"BaseNft\"\r\n}\r\n\r\nconst useContract = ({ contracts }: ContractNames) => {\r\n    const { state } = useWeb3Context() as IWeb3Context;\r\n    const ContractABI = contracts == \"BaseMarket\" ? BaseMarketABI : contracts == \"BaseCoin\" ? BaseCoinABI : BaseNftABI;\r\n    const address = contracts == \"BaseMarket\" ? market : contracts == \"BaseCoin\" ? coin : nft;\r\n    return useMemo(\r\n        () => state.signer && new Contract(address, ContractABI[\"abi\"], state.signer),\r\n        [state.signer]\r\n    );\r\n};\r\n\r\nexport default useContract;\r\n\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;AAGO,MAAM,OAAO,6CAA6C,+CAA+C;;AACzG,MAAM,MAAM,6CAA4C,gDAAgD;;AACxG,MAAM,SAAS,6CAA6C,8CAA8C;;AAMjH,MAAM,cAAc,CAAC,EAAE,SAAS,EAAiB;;IAC7C,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,iBAAc,AAAD;IAC/B,MAAM,cAAc,aAAa,eAAe,yFAAA,CAAA,UAAa,GAAG,aAAa,aAAa,uFAAA,CAAA,UAAW,GAAG,sFAAA,CAAA,UAAU;IAClH,MAAM,UAAU,aAAa,eAAe,SAAS,aAAa,aAAa,OAAO;IACtF,OAAO,CAAA,GAAA,4RAAA,CAAA,UAAO,AAAD;+BACT,IAAM,MAAM,MAAM,IAAI,IAAI,mNAAA,CAAA,WAAQ,CAAC,SAAS,WAAW,CAAC,MAAM,EAAE,MAAM,MAAM;8BAC5E;QAAC,MAAM,MAAM;KAAC;AAEtB;GARM;;QACgB,0HAAA,CAAA,iBAAc;;;uCASrB","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/components/coin-balance.tsx"],"sourcesContent":["\"use client\"\r\nimport { IWeb3Context, useWeb3Context } from '@/context/web3Context';\r\nimport useContract from '@/hooks/useReadContract';\r\nimport { formatEther } from 'ethers';\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nfunction CoinBalance() {\r\n    const contract = useContract({ contracts: \"BaseCoin\" });\r\n    const [balance, setBalance] = useState<string>();\r\n    const { state } = useWeb3Context() as IWeb3Context;\r\n    useEffect(()=>{\r\n        getBalance()\r\n    },[state.isAuthenticated])\r\n\r\n    const getBalance = async ()=>{\r\n        const balance = await contract?.balanceOf(state.address);\r\n        console.log(balance)\r\n        setBalance(formatEther(balance!))\r\n    }\r\n  return (\r\n    <div className=' text-xs'>{balance?.slice(0,8)} BaseCoin</div>\r\n  )\r\n}\r\n\r\nexport default CoinBalance"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;AAJA;;;;;AAMA,SAAS;;IACL,MAAM,WAAW,CAAA,GAAA,4HAAA,CAAA,UAAW,AAAD,EAAE;QAAE,WAAW;IAAW;IACrD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD;IACrC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,iBAAc,AAAD;IAC/B,CAAA,GAAA,4RAAA,CAAA,YAAS,AAAD;iCAAE;YACN;QACJ;gCAAE;QAAC,MAAM,eAAe;KAAC;IAEzB,MAAM,aAAa;QACf,MAAM,UAAU,MAAM,UAAU,UAAU,MAAM,OAAO;QACvD,QAAQ,GAAG,CAAC;QACZ,WAAW,CAAA,GAAA,6MAAA,CAAA,cAAW,AAAD,EAAE;IAC3B;IACF,qBACE,4TAAC;QAAI,WAAU;;YAAY,SAAS,MAAM,GAAE;YAAG;;;;;;;AAEnD;GAhBS;;QACY,4HAAA,CAAA,UAAW;QAEV,0HAAA,CAAA,iBAAc;;;KAH3B;uCAkBM","debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/components/connect-button.tsx"],"sourcesContent":["\"use client\"\r\nimport { useWeb3Context, IWeb3Context } from '@/context/web3Context'\r\nimport React, { useEffect } from 'react'\r\nimport CoinBalance from './coin-balance';\r\n\r\n\r\nfunction ConnectButton() {\r\n    const {state, connect, disconnect } = useWeb3Context() as IWeb3Context;\r\n    \r\n    return (\r\n        <>\r\n        <CoinBalance />\r\n        <div className=\" rounded-2xl px-4 py-1 bg-white/10 hover:backdrop-blur-3xl\">\r\n                                {\r\n                                    state.isAuthenticated && <div className=' text-sm md:text-base'>\r\n                                        {state.address?.slice(0,5) }...{state.address?.slice(-5, state.address.length)}\r\n                                    </div> \r\n                                }\r\n                                </div>\r\n        <div>\r\n           {\r\n            state.isAuthenticated ?\r\n            <button id=\"\" onClick={disconnect} className=\" bg-[#6154f3] text-white text-xs md:text-base  rounded-3xl px-4 py-2  \">Disconnect</button>:\r\n            <button id=\"\" onClick={()=>connect()} className=\" bg-[#6154f3] text-white text-xs md:text-base  rounded-3xl px-4 py-2  \">Connect</button>\r\n           }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConnectButton"],"names":[],"mappings":";;;;AACA;AAEA;;;AAHA;;;AAMA,SAAS;;IACL,MAAM,EAAC,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,iBAAc,AAAD;IAEnD,qBACI;;0BACA,4TAAC,iIAAA,CAAA,UAAW;;;;;0BACZ,4TAAC;gBAAI,WAAU;0BAEa,MAAM,eAAe,kBAAI,4TAAC;oBAAI,WAAU;;wBACnC,MAAM,OAAO,EAAE,MAAM,GAAE;wBAAI;wBAAI,MAAM,OAAO,EAAE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,MAAM;;;;;;;;;;;;0BAI7G,4TAAC;0BAEG,MAAM,eAAe,iBACrB,4TAAC;oBAAO,IAAG;oBAAG,SAAS;oBAAY,WAAU;8BAAyE;;;;;yCACtH,4TAAC;oBAAO,IAAG;oBAAG,SAAS,IAAI;oBAAW,WAAU;8BAAyE;;;;;;;;;;;;;AAKrI;GAtBS;;QACiC,0HAAA,CAAA,iBAAc;;;KAD/C;uCAwBM","debugId":null}}]
}