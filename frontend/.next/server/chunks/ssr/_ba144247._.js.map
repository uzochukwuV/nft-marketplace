{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/hooks/useReadContract.tsx"],"sourcesContent":["import { AbiCoder, Contract } from \"ethers\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport BaseMarketABI from \"@/abi/BaseMarket.json\"\r\nimport BaseCoinABI from \"@/abi/BaseNft.json\"\r\nimport BaseNftABI from \"@/abi/BaseNft.json\"\r\nimport { IWeb3Context, useWeb3Context } from \"@/context/web3Context\";\r\n\r\n\r\nconst coin = \"0x4b0243f5877cde3aff4a2bd32111505a8ffe55fa\"\r\nconst nft = \"0x30f6d11a066ec1343091b2dc108e6c3cd7faec10\"\r\nconst market = \"0x6543db3a145c3524c06a8a7cffdc45b5798da681\"\r\n\r\ninterface ContractNames {\r\n    contracts: \"BaseMarket\" | \"BaseCoin\" | \"BaseNft\"\r\n}\r\n\r\nconst useContract = ({ contracts }: ContractNames) => {\r\n    const { state } = useWeb3Context() as IWeb3Context;\r\n    const ContractABI = contracts == \"BaseMarket\" ? BaseMarketABI : contracts == \"BaseCoin\" ? BaseCoinABI : BaseNftABI;\r\n    const address = contracts == \"BaseMarket\" ? market : contracts == \"BaseCoin\" ? coin : nft;\r\n    return useMemo(\r\n        () => state.signer && new Contract(address, ContractABI[\"abi\"], state.signer),\r\n        [state.signer]\r\n    );\r\n};\r\n\r\nexport default useContract;\r\n\r\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;AACA;AAEA;;;;;;;AAGA,MAAM,OAAO;AACb,MAAM,MAAM;AACZ,MAAM,SAAS;AAMf,MAAM,cAAc,CAAC,EAAE,SAAS,EAAiB;IAC7C,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,uHAAA,CAAA,iBAAc,AAAD;IAC/B,MAAM,cAAc,aAAa,eAAe,yFAAA,CAAA,UAAa,GAAG,aAAa,aAAa,sFAAA,CAAA,UAAW,GAAG,sFAAA,CAAA,UAAU;IAClH,MAAM,UAAU,aAAa,eAAe,SAAS,aAAa,aAAa,OAAO;IACtF,OAAO,CAAA,GAAA,oUAAA,CAAA,UAAO,AAAD,EACT,IAAM,MAAM,MAAM,IAAI,IAAI,gNAAA,CAAA,WAAQ,CAAC,SAAS,WAAW,CAAC,MAAM,EAAE,MAAM,MAAM,GAC5E;QAAC,MAAM,MAAM;KAAC;AAEtB;uCAEe","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/app/market/assets/page.tsx"],"sourcesContent":["\"use client\"\r\nimport { IWeb3Context, useWeb3Context } from '@/context/web3Context';\r\nimport useContract from '@/hooks/useReadContract';\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nfunction Assets() {\r\n    const { state } = useWeb3Context() as IWeb3Context;\r\n    const contract = useContract({ contracts: \"BaseNft\" });\r\n    const [nfts, setNfts] = useState<any>()\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        \r\n        getNfts()\r\n    }, [])\r\n\r\n    const getNfts = async ()=>{\r\n        setLoading(true)\r\n        const filter = contract?.filters.Transfer(null, state.address);\r\n        const block = await contract?.deploymentTransaction()?.getBlock()\r\n        const events = await contract?.queryFilter(filter!,block?.number,  \"latest\")\r\n\r\n        console.log(events)\r\n        const tokenIDs = new Set();\r\n\r\n        for (const event of events!){\r\n            const {from, to, tokenId} = event?.args as any;\r\n            tokenIDs.add(tokenId)\r\n        }\r\n\r\n        console.log(tokenIDs)\r\n        const verifiedOwned = [];\r\n        for (const id of tokenIDs){\r\n            try {\r\n                const currentOwner = await contract?.ownerOf(id);\r\n                console.log(currentOwner)\r\n                if(currentOwner.toLowerCase() == state.address?.toLowerCase()){\r\n                    verifiedOwned.push(id);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.warn(\"Failed to verify nft\")\r\n            }\r\n        }\r\n        console.log(verifiedOwned);\r\n\r\n        // fetch ipfs data\r\n        const nftData = await Promise.all(\r\n            Array.from(verifiedOwned).map(async (tokenId)=>{\r\n                try {\r\n                    let tokenUri = await contract?.tokenURI(tokenId);\r\n                    if(tokenUri == \"\"){\r\n                        return {}\r\n                    }\r\n                    const res = fetch(tokenUri);\r\n                    const data = await (await res).json();\r\n                    console.log(data)\r\n                    return {\r\n                        tokenId,\r\n                        ...data\r\n                    }\r\n                } catch (error) {\r\n                   console.error(error) \r\n                }\r\n            })\r\n        )\r\n\r\n        setNfts(nftData)\r\n        setLoading(false);\r\n    }\r\n    \r\n  return (\r\n    <div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Assets"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAHA;;;;;AAKA,SAAS;IACL,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,uHAAA,CAAA,iBAAc,AAAD;IAC/B,MAAM,WAAW,CAAA,GAAA,yHAAA,CAAA,UAAW,AAAD,EAAE;QAAE,WAAW;IAAU;IACpD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD;IAC/B,MAAM,CAAC,WAAW,WAAW,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,CAAA,GAAA,oUAAA,CAAA,YAAS,AAAD,EAAE;QAEN;IACJ,GAAG,EAAE;IAEL,MAAM,UAAU;QACZ,WAAW;QACX,MAAM,SAAS,UAAU,QAAQ,SAAS,MAAM,MAAM,OAAO;QAC7D,MAAM,QAAQ,MAAM,UAAU,yBAAyB;QACvD,MAAM,SAAS,MAAM,UAAU,YAAY,QAAQ,OAAO,QAAS;QAEnE,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,IAAI;QAErB,KAAK,MAAM,SAAS,OAAQ;YACxB,MAAM,EAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAC,GAAG,OAAO;YACnC,SAAS,GAAG,CAAC;QACjB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,gBAAgB,EAAE;QACxB,KAAK,MAAM,MAAM,SAAS;YACtB,IAAI;gBACA,MAAM,eAAe,MAAM,UAAU,QAAQ;gBAC7C,QAAQ,GAAG,CAAC;gBACZ,IAAG,aAAa,WAAW,MAAM,MAAM,OAAO,EAAE,eAAc;oBAC1D,cAAc,IAAI,CAAC;gBACvB;YAEJ,EAAE,OAAO,OAAO;gBACZ,QAAQ,IAAI,CAAC;YACjB;QACJ;QACA,QAAQ,GAAG,CAAC;QAEZ,kBAAkB;QAClB,MAAM,UAAU,MAAM,QAAQ,GAAG,CAC7B,MAAM,IAAI,CAAC,eAAe,GAAG,CAAC,OAAO;YACjC,IAAI;gBACA,IAAI,WAAW,MAAM,UAAU,SAAS;gBACxC,IAAG,YAAY,IAAG;oBACd,OAAO,CAAC;gBACZ;gBACA,MAAM,MAAM,MAAM;gBAClB,MAAM,OAAO,MAAM,CAAC,MAAM,GAAG,EAAE,IAAI;gBACnC,QAAQ,GAAG,CAAC;gBACZ,OAAO;oBACH;oBACA,GAAG,IAAI;gBACX;YACJ,EAAE,OAAO,OAAO;gBACb,QAAQ,KAAK,CAAC;YACjB;QACJ;QAGJ,QAAQ;QACR,WAAW;IACf;IAEF,qBACE,6WAAC;;;;;AAIL;uCAEe","debugId":null}}]
}