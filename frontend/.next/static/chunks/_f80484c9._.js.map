{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/hooks/useReadContract.tsx"],"sourcesContent":["import { AbiCoder, Contract } from \"ethers\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport BaseMarketABI from \"@/abi/BaseMarket.json\"\r\nimport BaseCoinABI from \"@/abi/BaseNft.json\"\r\nimport BaseNftABI from \"@/abi/BaseNft.json\"\r\nimport { IWeb3Context, useWeb3Context } from \"@/context/web3Context\";\r\n\r\n\r\nexport const coin = \"0x4b0243f5877cde3aff4a2bd32111505a8ffe55fa\"\r\nexport const nft = \"0x30f6d11a066ec1343091b2dc108e6c3cd7faec10\"\r\nexport const market = \"0xd22caba8dfe5eb0ee64ec5f9b059a91874f4be84\"\r\n\r\ninterface ContractNames {\r\n    contracts: \"BaseMarket\" | \"BaseCoin\" | \"BaseNft\"\r\n}\r\n\r\nconst useContract = ({ contracts }: ContractNames) => {\r\n    const { state } = useWeb3Context() as IWeb3Context;\r\n    const ContractABI = contracts == \"BaseMarket\" ? BaseMarketABI : contracts == \"BaseCoin\" ? BaseCoinABI : BaseNftABI;\r\n    const address = contracts == \"BaseMarket\" ? market : contracts == \"BaseCoin\" ? coin : nft;\r\n    return useMemo(\r\n        () => state.signer && new Contract(address, ContractABI[\"abi\"], state.signer),\r\n        [state.signer]\r\n    );\r\n};\r\n\r\nexport default useContract;\r\n\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AAEA;;;;;;;;AAGO,MAAM,OAAO;AACb,MAAM,MAAM;AACZ,MAAM,SAAS;AAMtB,MAAM,cAAc,CAAC,EAAE,SAAS,EAAiB;;IAC7C,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,iBAAc,AAAD;IAC/B,MAAM,cAAc,aAAa,eAAe,yFAAA,CAAA,UAAa,GAAG,aAAa,aAAa,sFAAA,CAAA,UAAW,GAAG,sFAAA,CAAA,UAAU;IAClH,MAAM,UAAU,aAAa,eAAe,SAAS,aAAa,aAAa,OAAO;IACtF,OAAO,CAAA,GAAA,4RAAA,CAAA,UAAO,AAAD;+BACT,IAAM,MAAM,MAAM,IAAI,IAAI,mNAAA,CAAA,WAAQ,CAAC,SAAS,WAAW,CAAC,MAAM,EAAE,MAAM,MAAM;8BAC5E;QAAC,MAAM,MAAM;KAAC;AAEtB;GARM;;QACgB,0HAAA,CAAA,iBAAc;;;uCASrB","debugId":null}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS%20FX95G/Desktop/celusion/nft-marketplace/frontend/components/listed-assets.tsx"],"sourcesContent":["\"use client\"\r\nimport { IWeb3Context, useWeb3Context } from '@/context/web3Context';\r\nimport useContract from '@/hooks/useReadContract';\r\nimport { ListedNFT } from '@/interface/nft';\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nfunction ListedAssets() {\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const { state } = useWeb3Context() as IWeb3Context;\r\n    const market_contract = useContract({ contracts: \"BaseMarket\" });\r\n    const nft_contract = useContract({ contracts: \"BaseNft\" });\r\n\r\n    \r\n    useEffect(() => {\r\n        getListedNFts()\r\n    }, [])\r\n    const getListedNFts = async ()=>{\r\n        try {\r\n            const listedAssets = await market_contract?.getListedAssets(0, 10);\r\n            console.log(listedAssets)\r\n            \r\n            let allItems = [];\r\n            for (const item of listedAssets!){\r\n              console.log(item)\r\n              const [tokenId, price, owner] = item as any;\r\n              allItems.push({\r\n                tokenId,\r\n                price,\r\n                owner\r\n              })\r\n          }\r\n          console.log(allItems);\r\n\r\n          const nftData = await Promise.all(\r\n            Array.from(allItems).map(async (item)=>{\r\n                try {\r\n                    let tokenUri = await nft_contract?.tokenURI(item.tokenId);\r\n                    if(tokenUri == \"\"){\r\n                        return {\r\n                            ...item\r\n                        }\r\n                    }\r\n                    const res = fetch(tokenUri);\r\n                    const data = await (await res).json();\r\n                    console.log(data)\r\n                    return {\r\n                        ...data,\r\n                        ...item\r\n                    } as ListedNFT;\r\n                } catch (error) {\r\n                   console.error(error) \r\n                }\r\n            })\r\n        )\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n  return (\r\n    <div>Market</div>\r\n  )\r\n}\r\n\r\nexport default ListedAssets"],"names":[],"mappings":";;;;AACA;AACA;AAEA;;;AAJA;;;;AAMA,SAAS;;IACL,MAAM,CAAC,WAAW,WAAW,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAW;IAClD,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,iBAAc,AAAD;IAC/B,MAAM,kBAAkB,CAAA,GAAA,4HAAA,CAAA,UAAW,AAAD,EAAE;QAAE,WAAW;IAAa;IAC9D,MAAM,eAAe,CAAA,GAAA,4HAAA,CAAA,UAAW,AAAD,EAAE;QAAE,WAAW;IAAU;IAGxD,CAAA,GAAA,4RAAA,CAAA,YAAS,AAAD;kCAAE;YACN;QACJ;iCAAG,EAAE;IACL,MAAM,gBAAgB;QAClB,IAAI;YACA,MAAM,eAAe,MAAM,iBAAiB,gBAAgB,GAAG;YAC/D,QAAQ,GAAG,CAAC;YAEZ,IAAI,WAAW,EAAE;YACjB,KAAK,MAAM,QAAQ,aAAc;gBAC/B,QAAQ,GAAG,CAAC;gBACZ,MAAM,CAAC,SAAS,OAAO,MAAM,GAAG;gBAChC,SAAS,IAAI,CAAC;oBACZ;oBACA;oBACA;gBACF;YACJ;YACA,QAAQ,GAAG,CAAC;YAEZ,MAAM,UAAU,MAAM,QAAQ,GAAG,CAC/B,MAAM,IAAI,CAAC,UAAU,GAAG,CAAC,OAAO;gBAC5B,IAAI;oBACA,IAAI,WAAW,MAAM,cAAc,SAAS,KAAK,OAAO;oBACxD,IAAG,YAAY,IAAG;wBACd,OAAO;4BACH,GAAG,IAAI;wBACX;oBACJ;oBACA,MAAM,MAAM,MAAM;oBAClB,MAAM,OAAO,MAAM,CAAC,MAAM,GAAG,EAAE,IAAI;oBACnC,QAAQ,GAAG,CAAC;oBACZ,OAAO;wBACH,GAAG,IAAI;wBACP,GAAG,IAAI;oBACX;gBACJ,EAAE,OAAO,OAAO;oBACb,QAAQ,KAAK,CAAC;gBACjB;YACJ;QAGJ,EAAE,OAAO,OAAO;YACZ,QAAQ,GAAG,CAAC;QAChB;IACJ;IACF,qBACE,4TAAC;kBAAI;;;;;;AAET;GAxDS;;QAEa,0HAAA,CAAA,iBAAc;QACR,4HAAA,CAAA,UAAW;QACd,4HAAA,CAAA,UAAW;;;KAJ3B;uCA0DM","debugId":null}}]
}